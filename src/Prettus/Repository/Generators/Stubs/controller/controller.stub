<?php

$NAMESPACE$

use Illuminate\Http\Request;

use $APPNAME$Http\Requests;
use $APPNAME$Http\Resources\$CLASS$ as Resource;
use $APPNAME$Http\Resources\$CLASS$Collection as ResourceCollection;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;
use $APPNAME$Http\Requests\$CLASS$CreateRequest;
use $APPNAME$Http\Requests\$CLASS$UpdateRequest;
use Illuminate\Http\JsonResponse;
$REPOSITORY$
$VALIDATOR$

/**
 * Class $CONTROLLER$Controller.
 *
 * @package $NAMESPACE$
 */
class $CONTROLLER$Controller extends Controller
{
    /**
     * @var $CLASS$Repository
     */
    protected $repository;

    /**
     * @var $CLASS$Validator
     */
    protected $validator;

    /**
     * $CONTROLLER$Controller constructor.
     *
     * @param $CLASS$Repository $repository
     * @param $CLASS$Validator $validator
     */
    public function __construct($CLASS$Repository $repository, $CLASS$Validator $validator)
    {
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Display a listing of the resource.
     *
     * @return ResourceCollection|JsonResponse
     */
    public function index()
    {
        $this->repository->pushCriteria(app('Prettus\Repository\Criteria\RequestCriteria'));
        $$PLURAL$ = $this->repository->all();

        return new ResourceCollection($$PLURAL$);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  $CLASS$CreateRequest $request
     *
     * @return Resource|JsonResponse
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function store($CLASS$CreateRequest $request)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);
            $$SINGULAR$ = $this->repository->create($request->all());

            return (new Resource($$SINGULAR$->toArray()))
                ->response()
                ->setStatusCode(201);
        } catch (ValidatorException $e) {
            return response()->json([
                'error'   => true,
                'message' => $e->getMessageBag()
            ], 422);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return Resource|JsonResponse
     */
    public function show($id)
    {
        $$SINGULAR$ = $this->repository->find($id);

        return (new Resource($$SINGULAR$))
            ->response()
            ->setStatusCode(201);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $CLASS$UpdateRequest $request
     * @param  string            $id
     *
     * @return Resource|JsonResponse
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update($CLASS$UpdateRequest $request, $id)
    {
        try {
            $this->validator->with($request->all())->setId($id)->passesOrFail(ValidatorInterface::RULE_UPDATE);
            $$SINGULAR$ = $this->repository->update($request->all(), $id);

            return (new Resource($$SINGULAR$->toArray()))
                ->response()
                ->setStatusCode(200);
        } catch (ValidatorException $e) {
            return response()->json([
                'error'   => true,
                'message' => $e->getMessageBag()
            ]);
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $deleted = $this->repository->delete($id);

        return response()->json([
            'message' => '$CLASS$ deleted.',
            'deleted' => $deleted,
        ]);
    }
}
